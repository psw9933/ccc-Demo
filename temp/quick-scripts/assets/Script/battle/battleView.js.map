{"version":3,"sources":["battleView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\battle","sourcesContent":["import {gameProtocol} from \"../game/gameProtocol\"\r\nimport { playerRes } from \"../game/gameRes\"\r\nconst {ccclass, property} = cc._decorator;\r\nimport GameInfo from \"../module/GameInfo\"\r\n\r\n@ccclass\r\nexport default class battleView extends cc.Component {\r\n\r\n\r\n    @property(cc.Prefab)\r\n    PlayerPre:cc.Prefab=null;\r\n\r\n    /**角色运动类型 */\r\n    @property\r\n    actionType = gameProtocol.playerControl.actionType.inTheAir;\r\n\r\n    // @property(cc.Prefab)\r\n    // JoystickPre:cc.Prefab=null;\r\n\r\n     btnControlNode=null\r\n     playerNode:any=null\r\n     roleAniName:any=null;\r\n     roleHealthValue:any=null;\r\n     roleWeaponName:any=null;\r\n\r\n     landArea:any=null;\r\n     _actionType:any=null;\r\n    onLoad () {\r\n        //this.initEvent()\r\n        this.initRoleInfo();\r\n        this.initPlayer();\r\n        this.playerNode.parent=this.node;\r\n        this.initBtnControl();\r\n        this.initCollisionArea()\r\n    }\r\n\r\n    initBtnControl(){\r\n        cc.find('operationMenu',this.node).getComponent('gameKeyControl').playerControl=this.playerNode.getComponent('playerControl');\r\n    }\r\n    initCollisionArea(){\r\n        this.landArea=cc.find('background/land',this.node).getComponent(cc.BoxCollider)\r\n        cc.log(this.landArea)\r\n    }\r\n    initPlayer(){\r\n        this.playerNode=cc.instantiate(this.PlayerPre);\r\n        this.playerNode.getComponent(sp.SkeletonData);\r\n        this.playerNode.parent=this.node\r\n        this.initPlayerPosition();\r\n\r\n        let path = playerRes[this.roleAniName].aniPath;\r\n        let self = this;\r\n        cc.loader.loadRes(path, sp.SkeletonData, function (err, _SkeletonData) {\r\n            if (err) {\r\n                cc.error(err.message || err);\r\n                return;\r\n            }\r\n            else {\r\n                \r\n                self.playerNode.getComponent(sp.Skeleton).skeletonData = _SkeletonData;\r\n                self.playerNode.getComponent(sp.Skeleton).setSkin(self.roleWeaponName)\r\n            }\r\n        });\r\n    }\r\n\r\n    initPlayerPosition(){\r\n        let c_pos=cc.find('background/circle',this.node).getPosition();\r\n        let _x=c_pos.x;\r\n        let _y=c_pos.y+3;\r\n        this.playerNode.setPosition(_x,_y)\r\n    }\r\n\r\n    showHealthValue(){\r\n        let healthNode=cc.find('background/health',this.node);\r\n        let _iconItem=cc.find('lifeIcon',healthNode);\r\n\r\n        for(let i=0;i<this.roleHealthValue;i++){\r\n            let iconItem=cc.instantiate(_iconItem);\r\n            iconItem.parent=healthNode;\r\n            iconItem.active=true\r\n        }\r\n    }\r\n\r\n    initRoleInfo(){\r\n        let roleInfo=GameInfo.getInstance().returnRoleInfo()\r\n        this.roleAniName=roleInfo.roleAniName;\r\n        this.roleWeaponName=roleInfo.roleWeaponName;\r\n        this.roleHealthValue=GameInfo.getInstance().returnRoleInfo().roleMaxHealth;\r\n        this.showHealthValue()\r\n        console.log(roleInfo)\r\n    }\r\n\r\n    collisionDetection(){\r\n    // @property(cc.PolygonCollider)\r\n    // longarea: cc.PolygonCollider = null\r\n\r\n    // @property(cc.PolygonCollider)\r\n    // huarea: cc.PolygonCollider = null\r\n\r\n    // @property(cc.PolygonCollider)\r\n    // hearea: cc.PolygonCollider = null\r\n    // let p_pos=this.playerNode.getPosition();\r\n    //     var point = cc.find('background/land', this.node).convertToWorldSpaceAR(loaction);\r\n    //     // var bool = cc.Intersection.pointInPolygon(point, this.hearea.points)\r\n    //     let bool=cc.Intersection.rectRect(this.playerNode, this.landArea.node)\r\n    //     return bool\r\n    }\r\n\r\n    _onPlayerDropDown(){\r\n        let p_pos=this.playerNode.getPosition();\r\n        let _x=p_pos.x;\r\n        let _y=p_pos.y-1;\r\n        this.playerNode.setPosition(_x,_y)\r\n    }\r\n\r\n    checkPlayerPosition(){\r\n        cc.log(this.playerNode.getPosition().y)\r\n        if(this.playerNode.getPosition().y>-280){\r\n            return false\r\n        }\r\n        else{\r\n            return true\r\n        }\r\n    }\r\n    update(dt) {\r\n        if(this.checkPlayerPosition()) return;\r\n        this._onPlayerDropDown()\r\n        cc.log('DropDown')\r\n        //let bool=cc.Intersection.rectRect(this.playerNode, this.landArea.node)\r\n        // var point = this.playerNode.getChildByName('foot').convertToWorldSpaceAR(cc.v2(0, 0));;\r\n        // cc.log(point)\r\n        // cc.log(this.playerNode.getPosition())\r\n        // switch (this.actionType) {\r\n        //     case gameProtocol.playerControl.actionType.onLand:\r\n        //             return;\r\n        //     case gameProtocol.playerControl.actionType.inTheAir:\r\n        //             this._onPlayerDropDown();\r\n        //             break;\r\n        // }\r\n    }\r\n}\r\n"]}