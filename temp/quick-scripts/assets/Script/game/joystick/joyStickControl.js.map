{"version":3,"sources":["joyStickControl.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Script\\game\\joystick","sourcesContent":["import { gameProtocol } from \"../gameProtocol\"\r\nimport { playerControl } from \"../playerControl\"\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class joyStickControl extends cc.Component {\r\n\r\n  //摇杆操纵点\r\n  @property(cc.Node)\r\n  dot: cc.Node = null;\r\n  //摇杆背景节点\r\n  @property(cc.Node)\r\n  ring: cc.Node = null;\r\n  //摇杆所在位置\r\n  @property(cc.Node)\r\n  _stickPos: cc.Node = null;\r\n  //触摸位置\r\n  @property(cc.Node)\r\n  _touchLocation: cc.Node = null;\r\n  //操控角色\r\n  @property(playerControl)\r\n  playerControl: playerControl = null;\r\n\r\n  public radius = null;\r\n  public stickPos = null;\r\n  onLoad() {\r\n    this.radius = this.ring.width / 2;\r\n    this._initTouchEvent();\r\n  }\r\n\r\n  _initTouchEvent() {\r\n    // set the size of joystick node to control scale\r\n    const self = this;\r\n    self.node.on(cc.Node.EventType.TOUCH_START, self._touchStartEvent, self);\r\n    self.node.on(cc.Node.EventType.TOUCH_MOVE, self._touchMoveEvent, self);\r\n    self.node.on(cc.Node.EventType.TOUCH_END, self._touchEndEvent, self);\r\n    self.node.on(cc.Node.EventType.TOUCH_CANCEL, self._touchEndEvent, self);\r\n  }\r\n\r\n  _touchStartEvent(event) {\r\n    const touchPos = this.node.convertToNodeSpaceAR(event.getLocation());\r\n\r\n    this.stickPos = this.ring.getPosition();\r\n    // 触摸点与圆圈中心的距离\r\n    const distance = touchPos.sub(this.ring.getPosition()).mag();\r\n\r\n    // 手指在圆圈内触摸,控杆跟随触摸点\r\n    if (this.stickPos > distance) {\r\n      this.dot.setPosition(touchPos);\r\n    }\r\n\r\n  }\r\n\r\n  _touchMoveEvent(event) {\r\n    // 以圆圈为锚点获取触摸坐标\r\n    const touchPos = this.ring.convertToNodeSpaceAR(event.getLocation());\r\n    const distance = touchPos.mag();\r\n\r\n    // 由于摇杆的 postion 是以父节点为锚点，所以定位要加上 touch start 时的位置\r\n    const posX = this.stickPos.x + touchPos.x;\r\n    const posY = this.stickPos.y + touchPos.y;\r\n\r\n    // 归一化\r\n    const p = cc.v2(posX, posY).sub(this.ring.getPosition()).normalize();\r\n\r\n    if (this.radius > distance) {\r\n      this.dot.setPosition(cc.v2(posX, posY));\r\n\r\n      this.playerControl._speedType = gameProtocol.joystick.SpeedType.NORMAL;\r\n    } else {\r\n      // 控杆永远保持在圈内，并在圈内跟随触摸更新角度\r\n      const x = this.stickPos.x + p.x * this.radius;\r\n      const y = this.stickPos.y + p.y * this.radius;\r\n      this.dot.setPosition(cc.v2(x, y));\r\n\r\n      this.playerControl._speedType = gameProtocol.joystick.SpeedType.FAST;\r\n    }\r\n\r\n    //this.playerControl = this.playerControl.getComponent('playerControl');\r\n    this.playerControl.moveDir = p;\r\n  }\r\n\r\n  _touchEndEvent() {\r\n    this.dot.setPosition(this.ring.getPosition());\r\n    this.playerControl._speedType = gameProtocol.joystick.SpeedType.STOP;\r\n    cc.systemEvent.emit(gameProtocol.event.displayJoyStick);\r\n  }\r\n\r\n  // // methods\r\n\r\n  // setPlayerSpeed() {\r\n  //   this.playerControl = this.playerControl.getComponent('Player');\r\n  //   this.playerControl.moveDir = p;\r\n  //   this.playerControl._speedType = gameProtocol.joystick.SpeedType.NORMAL;\r\n  // }\r\n}\r\n"]}